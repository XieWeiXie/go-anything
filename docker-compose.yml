version: "3"

services:
  redis:
    image: redis:latest
    ports:
      - 6379:6379
    expose:
      - 6379
    container_name: redis_01
    command: redis-server --appendonly yes --requirepass "adminRedis"
    networks:
      - go-anything-network
    volumes:
      - data:/data
  mysql:
    image: mysql:latest
    container_name: mysql_01
    networks:
      - go-anything-network
    command: --default-authentication-plugin=mysql_native_password
    environment:
      MYSQL_ROOT_PASSWORD: adminMysql
      MYSQL_DATABASE: go-anything
      MYSQL_USER: root
    ports:
      - 3307:3306
  kafka:
    image: index.docker.io/wurstmeister/kafka:latest
    container_name: kafka_01
    ports:
      - 9092:9092
    environment:
      KAFKA_OFFSETS_TOPIC_REPLIATION_FACTOR: 1
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9092"
      KAFKA_LISTENERS: "PLAINTEXT://:9092"
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "go-anything:20:1:compact"
      KAFKA_LOG_DIRS: /kafka/kafka-logs
    depends_on:
      - zookeeper
    networks:
      - go-anything-network
    volumes:
      - data:/kafka/kafka-logs
  zookeeper:
    image: index.docker.io/wurstmeister/zookeeper:latest
    container_name: zookeeper_01
    ports:
      - 2181:2181
    networks:
      - go-anything-network
  etcd1:
    image: quay.io/coreos/etcd:v3.3.18
    container_name: etcd1
    ports:
      - 23791:2379
      - 23801:2380
    networks:
      - go-anything-network
    command:
      /usr/local/bin/etcd
      -name etcd1
      -data-dir=/etcd-data
      -advertise-client-urls http://etcd1:2379
      -initial-advertise-peer-urls http://etcd1:2380
      -listen-client-urls http://0.0.0.0:2379
      -listen-peer-urls http://0.0.0.0:2380
      -initial-cluster-token etcd-cluster
      -initial-cluster etcd1=http://etcd1:2380,etcd2=http://etcd2:2380,etcd3=http://etcd3:2380
      -initial-cluster-state new
  etcd2:
    image: quay.io/coreos/etcd:v3.3.18
    container_name: etcd2
    ports:
      - 23792:2379
      - 23802:2380
    networks:
      - go-anything-network
    command:
      /usr/local/bin/etcd
      -name etcd2
      -data-dir=/etcd-data
      -advertise-client-urls http://etcd2:2379
      -initial-advertise-peer-urls http://etcd2:2380
      -listen-client-urls http://0.0.0.0:2379
      -listen-peer-urls http://0.0.0.0:2380
      -initial-cluster-token etcd-cluster
      -initial-cluster etcd1=http://etcd1:2380,etcd2=http://etcd2:2380,etcd3=http://etcd3:2380
      -initial-cluster-state new
  etcd3:
    image: quay.io/coreos/etcd:v3.3.18
    container_name: etcd3
    ports:
      - 23793:2379
      - 23803:2380
    networks:
      - go-anything-network
    command:
      /usr/local/bin/etcd
      -name etcd3
      -data-dir=/etcd-data
      -advertise-client-urls http://etcd3:2379
      -initial-advertise-peer-urls http://etcd3:2380
      -listen-client-urls http://0.0.0.0:2379
      -listen-peer-urls http://0.0.0.0:2380
      -initial-cluster-token etcd-cluster
      -initial-cluster etcd1=http://etcd1:2380,etcd2=http://etcd2:2380,etcd3=http://etcd3:2380
      -initial-cluster-state new
  cerebro:
    image: lmenezes/cerebro:0.8.3
    container_name: cerebro_01
    ports:
      - "9000:9000"
    command:
      - -Dhosts.0.host=http://elasticsearch:9200
    networks:
      - go-anything-network
    depends_on:
      - elasticsearch
      - elasticsearch2
      - elasticsearch3
  kibana:
    image: docker.elastic.co/kibana/kibana:7.5.0
    container_name: kibana_01
    environment:
      - "I18N_LOCALE=zh-CN"
      - "XPACK_GRAPH_ENABLED=true"
      - "TIMELION_ENABLED=true"
      - "XPACK_MONITORING_COLLECTION_ENABLED=true"
    ports:
      - "5601:5601"
    networks:
      - go-anything-network
  logstash:
    image: docker.elastic.co/logstash/logstash:7.5.0
    container_name: logstash_01
    ports:
      - "5000:5000"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: "-Xmx512m -Xms512m"
    networks:
      - go-anything-network
    depends_on:
      - elasticsearch
      - elasticsearch2
      - elasticsearch3
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.5.0
    container_name: es_01
    environment:
      - "http.host=0.0.0.0"
      - "cluster.name=es-clustername"
      - "node.name=es_01"
      - "bootstrap.memory_lock=true"
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - "discovery.seed_hosts=es_01,es_02,es_03"
      - "cluster.initial_master_nodes=es_01,es_02,es_03"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - 9200:9200
    networks:
      - go-anything-network
  elasticsearch2:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.5.0
    container_name: es_02
    environment:
      - "http.host=0.0.0.0"
      - "cluster.name=es-clustername"
      - "node.name=es_02"
      - "bootstrap.memory_lock=true"
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - "discovery.seed_hosts=es_01,es_02,es_03"
      - "cluster.initial_master_nodes=es_01,es_02,es_03"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    networks:
      - go-anything-network
  elasticsearch3:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.5.0
    container_name: es_03
    environment:
      - "http.host=0.0.0.0"
      - "cluster.name=es-clustername"
      - "node.name=es_03"
      - "bootstrap.memory_lock=true"
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - "discovery.seed_hosts=es_01,es_02,es_03"
      - "cluster.initial_master_nodes=es_01,es_02,es_03"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    networks:
      - go-anything-network
networks:
  go-anything-network:
    driver: bridge
volumes:
  data: {}